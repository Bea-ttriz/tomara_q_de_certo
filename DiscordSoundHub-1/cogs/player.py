import os
import logging
import asyncio
import traceback
import shutil
from collections import deque
import discord
from discord.ext import commands
from discord import FFmpegPCMAudio, PCMVolumeTransformer
import database
import utils

class Player(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.logger = logging.getLogger('discord_bot.player')
        self.currently_playing = {}  # {guild_id: audio_name}
        self.queues = {}  # {guild_id: deque([audio1, audio2, ...])}
        self.is_loop = {}  # {guild_id: bool} - Se a fila est√° em loop
        
        # Log de inicializa√ß√£o
        self.logger.info("Sistema de fila de reprodu√ß√£o inicializado")
        self.logger.info(f"FFmpeg dispon√≠vel: {shutil.which('ffmpeg') is not None}")
    
    async def _play_from_queue(self, guild_id):
        """Reproduz o pr√≥ximo √°udio da fila"""
        if guild_id not in self.queues or not self.queues[guild_id]:
            self.logger.info(f"Fila vazia para o servidor {guild_id}")
            return False
        
        # Obter o voice client
        guild = self.bot.get_guild(guild_id)
        if not guild:
            self.logger.error(f"Servidor {guild_id} n√£o encontrado")
            return False
        
        voice_client = guild.voice_client
        if not voice_client:
            self.logger.error(f"Voice client n√£o encontrado para o servidor {guild_id}")
            return False
        
        # Obter o pr√≥ximo √°udio da fila
        audio_name = self.queues[guild_id].popleft()
        audio = database.get_audio_by_name(audio_name)
        
        if not audio:
            self.logger.error(f"√Åudio '{audio_name}' n√£o encontrado no banco de dados")
            # Tentar reproduzir o pr√≥ximo da fila
            return await self._play_from_queue(guild_id)
        
        # Se estiver em modo loop, adicionar o √°udio novamente ao final da fila
        if guild_id in self.is_loop and self.is_loop[guild_id]:
            self.queues[guild_id].append(audio_name)
        
        try:
            # Log para diagn√≥stico
            self.logger.info(f"Reproduzindo pr√≥ximo √°udio da fila: {audio['nome']} de {audio['caminho']}")
            
            # Adicionar op√ß√µes do FFmpeg
            ffmpeg_options = {
                'options': '-vn -loglevel warning -nostats',
                'before_options': '-nostdin -y'
            }
            
            try:
                # Verificar se Opus est√° carregado
                opus_loaded = discord.opus.is_loaded()
                self.logger.info(f"Status Opus: {'Carregado' if opus_loaded else 'N√£o carregado'}")
                
                # Criar o player de √°udio e aplicar controle de volume
                audio_source = FFmpegPCMAudio(audio['caminho'], **ffmpeg_options)
                
                # Aplicar transformador de volume apenas se Opus estiver dispon√≠vel
                if opus_loaded:
                    audio_source = PCMVolumeTransformer(audio_source, volume=0.5)
                
                # Reproduzir o √°udio
                voice_client.play(
                    audio_source,
                    after=lambda e: self._queue_callback(guild_id, audio_name, e)
                )
            except discord.opus.OpusNotLoaded as opus_error:
                self.logger.warning(f"Opus n√£o carregado. Usando modo n√£o otimizado: {opus_error}")
                
                # Abordagem simplificada sem Opus
                simple_audio = FFmpegPCMAudio(audio['caminho'], options='-vn')
                voice_client.play(
                    simple_audio,
                    after=lambda e: self._queue_callback(guild_id, audio_name, e)
                )
            except Exception as audio_error:
                self.logger.error(f"Erro espec√≠fico ao criar fonte de √°udio da fila: {audio_error}")
                
                # Tentativa alternativa com configura√ß√µes m√≠nimas
                self.logger.info("Tentando abordagem alternativa para √°udio da fila...")
                try:
                    simple_audio = FFmpegPCMAudio(audio['caminho'], options='-vn')
                    voice_client.play(
                        simple_audio,
                        after=lambda e: self._queue_callback(guild_id, audio_name, e)
                    )
                except Exception as final_error:
                    self.logger.error(f"Falha final ao tentar reproduzir √°udio: {final_error}")
                    raise RuntimeError(f"N√£o foi poss√≠vel reproduzir o √°udio: {audio_name}")
            
            # Registrar que est√° tocando
            self.currently_playing[guild_id] = audio_name
            
            # Enviar confirma√ß√£o se poss√≠vel
            try:
                # Encontrar um canal para enviar a mensagem
                for channel in guild.text_channels:
                    if channel.permissions_for(guild.me).send_messages:
                        embed = utils.create_embed_for_audio(audio, is_playing=True)
                        await channel.send(f"üéµ **Reproduzindo da fila:**", embed=embed)
                        break
            except Exception as channel_error:
                self.logger.error(f"Erro ao enviar mensagem de reprodu√ß√£o: {channel_error}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Erro ao reproduzir √°udio da fila: {e}")
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            return False
    
    def _queue_callback(self, guild_id, audio_name, error):
        """Callback para reprodu√ß√£o de √°udios da fila"""
        if error:
            self.logger.error(f"Erro ao reproduzir √°udio '{audio_name}' da fila: {error}")
            self.logger.error(f"Traceback: {traceback.format_exception(type(error), error, error.__traceback__)}")
        
        # Remover do registro de reprodu√ß√£o
        if guild_id in self.currently_playing:
            del self.currently_playing[guild_id]
        
        # Verificar se h√° mais √°udios na fila
        if guild_id in self.queues and self.queues[guild_id]:
            # Usar asyncio.run_coroutine_threadsafe para executar a corotina de forma segura
            # a partir deste callback que n√£o √© uma corotina
            coro = self._play_from_queue(guild_id)
            fut = asyncio.run_coroutine_threadsafe(coro, self.bot.loop)
            try:
                fut.result()
            except Exception as e:
                self.logger.error(f"Erro ao reproduzir pr√≥ximo √°udio da fila: {e}")
        else:
            self.logger.info(f"Fila do servidor {guild_id} conclu√≠da")
    
    @commands.command(name="tocar")
    async def play_audio(self, ctx, *, audio_name: str):
        """Reproduz um arquivo de √°udio pelo nome ou o adiciona √† fila se algo j√° estiver tocando"""
        # Buscar o √°udio no banco de dados
        audio = database.get_audio_by_name(audio_name)
        if not audio:
            await ctx.send(f"‚ùå √Åudio '{audio_name}' n√£o encontrado. Use !listar para ver os √°udios dispon√≠veis.")
            return
        
        # Verificar se o arquivo existe
        if not os.path.isfile(audio['caminho']):
            await ctx.send(f"‚ùå Arquivo de √°udio n√£o encontrado em '{audio['caminho']}'.")
            return
        
        # Conectar ao canal de voz
        voice_client = await utils.ensure_voice_client(ctx)
        if not voice_client:
            return
        
        # Inicializar fila para o servidor se n√£o existir
        guild_id = ctx.guild.id
        if guild_id not in self.queues:
            self.queues[guild_id] = deque()
        
        # Verificar se j√° est√° tocando algo
        if voice_client.is_playing():
            # Adicionar √† fila em vez de interromper
            self.queues[guild_id].append(audio_name)
            position = len(self.queues[guild_id])
            
            embed = utils.create_embed_for_audio(audio)
            embed.title = f"üéµ Adicionado √† fila: {audio['nome']}"
            embed.add_field(name="Posi√ß√£o na fila", value=f"{position}", inline=True)
            
            await ctx.send(embed=embed)
            return
        
        # Tocar o √°udio imediatamente
        try:
            # Log para diagn√≥stico
            self.logger.info(f"Tentando reproduzir √°udio: {audio['nome']} de {audio['caminho']}")
            self.logger.info(f"Canal de voz: {voice_client.channel.name}, guild: {ctx.guild.name}")
            
            # Adicionar op√ß√µes do FFmpeg para melhorar a estabilidade
            ffmpeg_options = {
                'options': '-vn -loglevel warning -nostats',  # Desativar v√≠deo, reduzir logs
                'before_options': '-nostdin -y'  # Evitar problemas de entrada e sobrescrever arquivos
            }
            
            # Verificar se o ffmpeg est√° dispon√≠vel
            ffmpeg_path = shutil.which('ffmpeg')
            self.logger.info(f"FFMPEG path: {ffmpeg_path}")
            
            try:
                # Verificar se Opus est√° carregado
                opus_loaded = discord.opus.is_loaded()
                self.logger.info(f"Status Opus: {'Carregado' if opus_loaded else 'N√£o carregado'}")
                
                # Criar o player de √°udio e aplicar controle de volume
                audio_source = FFmpegPCMAudio(audio['caminho'], **ffmpeg_options)
                
                # Aplicar transformador de volume apenas se Opus estiver dispon√≠vel
                if opus_loaded:
                    audio_source = PCMVolumeTransformer(audio_source, volume=0.5)
                
                # Reproduzir o √°udio
                voice_client.play(
                    audio_source,
                    after=lambda e: self._queue_callback(ctx.guild.id, audio['nome'], e)
                )
            except discord.opus.OpusNotLoaded as opus_error:
                self.logger.warning(f"Opus n√£o carregado. Usando modo n√£o otimizado: {opus_error}")
                
                # Abordagem simplificada sem Opus
                simple_audio = FFmpegPCMAudio(audio['caminho'], options='-vn')
                voice_client.play(
                    simple_audio,
                    after=lambda e: self._queue_callback(ctx.guild.id, audio['nome'], e)
                )
            except Exception as audio_error:
                self.logger.error(f"Erro espec√≠fico ao criar fonte de √°udio: {audio_error}")
                
                # Tentativa alternativa com op√ß√µes m√≠nimas
                self.logger.info("Tentando abordagem alternativa sem controle de volume...")
                try:
                    simple_audio = FFmpegPCMAudio(audio['caminho'], options='-vn')
                    voice_client.play(
                        simple_audio,
                        after=lambda e: self._queue_callback(ctx.guild.id, audio['nome'], e)
                    )
                except Exception as final_error:
                    self.logger.error(f"Falha final ao tentar reproduzir √°udio: {final_error}")
                    await ctx.send(f"‚ùå N√£o foi poss√≠vel reproduzir o √°udio: {audio_name}")
                    return
            
            # Registrar que est√° tocando
            self.currently_playing[ctx.guild.id] = audio['nome']
            
            # Enviar confirma√ß√£o com embed
            embed = utils.create_embed_for_audio(audio, is_playing=True)
            await ctx.send(embed=embed)
            
            self.logger.info(f"Reprodu√ß√£o iniciada com sucesso: {audio['nome']}")
            
        except Exception as e:
            self.logger.error(f"Erro ao reproduzir √°udio: {e}")
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            await ctx.send(f"‚ùå Erro ao reproduzir √°udio: {e}")
    
    @commands.command(name="pausar")
    async def pause_audio(self, ctx):
        """Pausa a reprodu√ß√£o atual"""
        voice_client = ctx.guild.voice_client
        if voice_client and voice_client.is_playing():
            voice_client.pause()
            await ctx.send("‚è∏Ô∏è √Åudio pausado.")
        else:
            await ctx.send("‚ùå N√£o h√° √°udio sendo reproduzido.")
    
    @commands.command(name="continuar")
    async def resume_audio(self, ctx):
        """Continua uma reprodu√ß√£o pausada"""
        voice_client = ctx.guild.voice_client
        if voice_client and voice_client.is_paused():
            voice_client.resume()
            await ctx.send("‚ñ∂Ô∏è √Åudio continuando.")
        else:
            await ctx.send("‚ùå N√£o h√° √°udio pausado para continuar.")
    
    @commands.command(name="parar")
    async def stop_audio(self, ctx):
        """Para a reprodu√ß√£o e desconecta"""
        guild_id = ctx.guild.id
        voice_client = ctx.guild.voice_client
        if voice_client:
            if voice_client.is_playing() or voice_client.is_paused():
                voice_client.stop()
                await ctx.send("‚èπÔ∏è Reprodu√ß√£o interrompida.")
            
            await voice_client.disconnect()
            await ctx.send("üëã Desconectado do canal de voz.")
            
            # Limpar o registro de reprodu√ß√£o e fila
            if guild_id in self.currently_playing:
                del self.currently_playing[guild_id]
            
            if guild_id in self.queues:
                self.queues[guild_id].clear()
                await ctx.send("üóëÔ∏è Fila de reprodu√ß√£o limpa.")
        else:
            await ctx.send("‚ùå O bot n√£o est√° conectado a um canal de voz.")
    
    @commands.command(name="pular")
    async def skip_audio(self, ctx):
        """Pula para o pr√≥ximo √°udio na fila"""
        guild_id = ctx.guild.id
        voice_client = ctx.guild.voice_client
        
        if not voice_client:
            await ctx.send("‚ùå O bot n√£o est√° conectado a um canal de voz.")
            return
        
        if not voice_client.is_playing():
            await ctx.send("‚ùå Nenhum √°udio est√° sendo reproduzido no momento.")
            return
        
        # Verificar se existe uma fila e se h√° pr√≥ximos √°udios
        if guild_id not in self.queues or not self.queues[guild_id]:
            await ctx.send("‚è≠Ô∏è Pulando √°udio, mas n√£o h√° mais √°udios na fila.")
            voice_client.stop()
            return
        
        # Parar o √°udio atual para que o callback seja chamado
        # e o pr√≥ximo √°udio da fila seja reproduzido automaticamente
        await ctx.send("‚è≠Ô∏è Pulando para o pr√≥ximo √°udio...")
        voice_client.stop()
    
    @commands.command(name="fila")
    async def show_queue(self, ctx):
        """Mostra a fila de reprodu√ß√£o atual"""
        guild_id = ctx.guild.id
        
        if guild_id not in self.queues or not self.queues[guild_id]:
            await ctx.send("üìÉ A fila de reprodu√ß√£o est√° vazia.")
            return
        
        # Criar embed para listar os √°udios na fila
        embed = discord.Embed(
            title="üé∂ Fila de Reprodu√ß√£o",
            description=f"Total de √°udios na fila: {len(self.queues[guild_id])}",
            color=discord.Color.blue()
        )
        
        # Adicionar o √°udio que est√° sendo reproduzido atualmente
        if guild_id in self.currently_playing:
            current_audio_name = self.currently_playing[guild_id]
            audio = database.get_audio_by_name(current_audio_name)
            if audio:
                embed.add_field(
                    name="üîä Tocando Agora:",
                    value=f"{audio.get('emoji', 'üéµ')} **{audio['nome']}**",
                    inline=False
                )
        
        # Adicionar os pr√≥ximos √°udios da fila (limitado a 10)
        items = list(self.queues[guild_id])
        max_items = min(10, len(items))
        
        queue_text = ""
        for i in range(max_items):
            audio_name = items[i]
            audio = database.get_audio_by_name(audio_name)
            if audio:
                emoji = audio.get('emoji', 'üéµ')
                queue_text += f"{i+1}. {emoji} **{audio['nome']}**\n"
            else:
                queue_text += f"{i+1}. üéµ **{audio_name}** (n√£o encontrado)\n"
        
        # Se houver mais de 10 √°udios, indicar quantos n√£o foram mostrados
        if len(items) > 10:
            queue_text += f"\n... e mais {len(items) - 10} √°udios na fila."
        
        embed.add_field(
            name="üìã Pr√≥ximos na Fila:",
            value=queue_text if queue_text else "Nenhum √°udio na fila.",
            inline=False
        )
        
        # Adicionar informa√ß√£o sobre o modo de loop
        loop_status = "‚úÖ Ativado" if guild_id in self.is_loop and self.is_loop[guild_id] else "‚ùå Desativado"
        embed.add_field(
            name="üîÑ Modo Loop:",
            value=loop_status,
            inline=True
        )
        
        await ctx.send(embed=embed)
    
    @commands.command(name="limpar")
    async def clear_queue(self, ctx):
        """Limpa a fila de reprodu√ß√£o"""
        guild_id = ctx.guild.id
        
        if guild_id not in self.queues or not self.queues[guild_id]:
            await ctx.send("‚ùå A fila j√° est√° vazia.")
            return
        
        # Limpar a fila
        queue_size = len(self.queues[guild_id])
        self.queues[guild_id].clear()
        
        await ctx.send(f"üóëÔ∏è Fila limpa! {queue_size} √°udios foram removidos.")
    
    @commands.command(name="loop")
    async def toggle_loop(self, ctx):
        """Ativa ou desativa o modo de repeti√ß√£o da fila"""
        guild_id = ctx.guild.id
        
        # Inicializar o estado do loop se necess√°rio
        if guild_id not in self.is_loop:
            self.is_loop[guild_id] = False
        
        # Inverter o estado atual
        self.is_loop[guild_id] = not self.is_loop[guild_id]
        
        if self.is_loop[guild_id]:
            await ctx.send("üîÑ Modo loop **ativado**! A fila ser√° repetida continuamente.")
        else:
            await ctx.send("üîÑ Modo loop **desativado**! A fila ser√° reproduzida apenas uma vez.")
    
    @commands.command(name="embaralhar")
    async def shuffle_queue(self, ctx):
        """Embaralha a fila de reprodu√ß√£o"""
        guild_id = ctx.guild.id
        
        if guild_id not in self.queues or not self.queues[guild_id]:
            await ctx.send("‚ùå A fila est√° vazia, n√£o h√° o que embaralhar.")
            return
        
        # Converter a deque para lista, embaralhar e voltar para deque
        queue_list = list(self.queues[guild_id])
        import random
        random.shuffle(queue_list)
        self.queues[guild_id] = deque(queue_list)
        
        await ctx.send("üîÄ Fila embaralhada com sucesso!")
        # Mostrar a nova fila
        await self.show_queue(ctx)
    
    @commands.command(name="adicionar")
    async def add_to_queue(self, ctx, *, audio_names: str):
        """Adiciona m√∫ltiplos √°udios √† fila de reprodu√ß√£o, separados por v√≠rgula"""
        guild_id = ctx.guild.id
        
        # Inicializar fila se n√£o existir
        if guild_id not in self.queues:
            self.queues[guild_id] = deque()
        
        # Conectar ao canal de voz
        voice_client = await utils.ensure_voice_client(ctx)
        if not voice_client:
            return
        
        # Separar os nomes de √°udio por v√≠rgula
        names = [name.strip() for name in audio_names.split(',')]
        if not names:
            await ctx.send("‚ùå Por favor, forne√ßa pelo menos um nome de √°udio.")
            return
        
        added_count = 0
        not_found = []
        
        # Adicionar cada √°udio √† fila
        for audio_name in names:
            if not audio_name:  # Pular strings vazias
                continue
                
            audio = database.get_audio_by_name(audio_name)
            if not audio:
                not_found.append(audio_name)
                continue
            
            if not os.path.isfile(audio['caminho']):
                not_found.append(f"{audio_name} (arquivo n√£o encontrado)")
                continue
            
            # Adicionar √† fila
            self.queues[guild_id].append(audio_name)
            added_count += 1
        
        # Se n√£o houver nada tocando, iniciar a reprodu√ß√£o
        if added_count > 0 and not voice_client.is_playing():
            await self._play_from_queue(guild_id)
            return
        
        # Mensagem de confirma√ß√£o
        if added_count > 0:
            message = f"‚úÖ {added_count} √°udio(s) adicionado(s) √† fila."
            if not_found:
                message += f"\n‚ùå N√£o encontrado(s): {', '.join(not_found)}"
            await ctx.send(message)
        else:
            await ctx.send(f"‚ùå Nenhum √°udio v√°lido encontrado. N√£o encontrado(s): {', '.join(not_found)}")
    
    @commands.command(name="remover")
    async def remove_from_queue(self, ctx, position: int):
        """Remove um √°udio da fila pela sua posi√ß√£o"""
        guild_id = ctx.guild.id
        
        if guild_id not in self.queues or not self.queues[guild_id]:
            await ctx.send("‚ùå A fila est√° vazia.")
            return
        
        if position < 1 or position > len(self.queues[guild_id]):
            await ctx.send(f"‚ùå Posi√ß√£o inv√°lida. A fila tem {len(self.queues[guild_id])} √°udios.")
            return
        
        # Converter para lista para poder remover por √≠ndice
        queue_list = list(self.queues[guild_id])
        audio_name = queue_list[position - 1]
        audio = database.get_audio_by_name(audio_name)
        
        # Remover o √°udio
        del queue_list[position - 1]
        self.queues[guild_id] = deque(queue_list)
        
        # Enviar confirma√ß√£o
        if audio:
            await ctx.send(f"‚ùå **{audio['nome']}** removido da fila.")
        else:
            await ctx.send(f"‚ùå √Åudio na posi√ß√£o {position} removido da fila.")
    
    def play_callback(self, guild_id, audio_name, error):
        """Callback chamado ap√≥s a conclus√£o de um √°udio (vers√£o legada, mantida para compatibilidade)"""
        # Redirecionar para o novo callback de fila
        self._queue_callback(guild_id, audio_name, error)
    
    @commands.command(name="tocando")
    async def now_playing(self, ctx):
        """Mostra o que est√° tocando atualmente"""
        guild_id = ctx.guild.id
        if guild_id in self.currently_playing:
            audio_name = self.currently_playing[guild_id]
            audio = database.get_audio_by_name(audio_name)
            
            if audio:
                embed = utils.create_embed_for_audio(audio, is_playing=True)
                await ctx.send(embed=embed)
            else:
                await ctx.send(f"üéµ Tocando: {audio_name}")
        else:
            await ctx.send("‚ùå N√£o h√° nada tocando no momento.")
    
    # Lidar com rea√ß√µes de emoji (para tocar via emoji)
    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload):
        """Toca um √°udio quando um emoji associado √© clicado"""
        # Ignorar rea√ß√µes do pr√≥prio bot
        if payload.user_id == self.bot.user.id:
            return
        
        # Obter o emoji e verificar se est√° associado a um √°udio
        emoji = str(payload.emoji)
        audio = database.get_audio_by_emoji(emoji)
        
        if not audio:
            return
        
        # Obter o canal e o usu√°rio
        guild = self.bot.get_guild(payload.guild_id)
        channel = guild.get_channel(payload.channel_id)
        user = guild.get_member(payload.user_id)
        
        # Verificar se o usu√°rio est√° em um canal de voz
        if not user.voice:
            return
        
        # Criar um contexto fake para usar as fun√ß√µes existentes
        ctx = type('obj', (object,), {
            'guild': guild,
            'send': channel.send,
            'author': user
        })
        
        # Tocar o √°udio
        await self.play_audio(ctx, audio_name=audio['nome'])

async def setup(bot):
    await bot.add_cog(Player(bot))
